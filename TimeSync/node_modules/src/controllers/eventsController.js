// src/controllers/eventsController.js
const Event = require('../models/Event');
const { validationResult } = require('express-validator');

// Controladores para manipulação de eventos
const getAllEvents = async (req, res) => {
  try {
    const events = await Event.find({ user: req.user.id });
    res.json(events);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const getEventsByMonth = async (req, res) => {
  const month = req.params.month;
  try {
    const events = await Event.find({ user: req.user.id, 'date': { $regex: new RegExp(`-${month}-`) } });
    res.json(events);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const createEvent = async (req, res) => {
  const event = new Event({ ...req.body, user: req.user.id });

  try {
    const newEvent = await event.save();
    res.status(201).json(newEvent);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

const addNote = async (req, res) => {
  const eventId = req.params.eventId;
  const { note } = req.body;

  try {
    const event = await Event.findById(eventId);
    if (!event || event.user.toString() !== req.user.id) {
      return res.status(404).json({ message: 'Evento não encontrado' });
    }

    event.notes.push({ note });
    const updatedEvent = await event.save();
    res.json(updatedEvent);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

const deleteNote = async (req, res) => {
  const eventId = req.params.eventId;
  const noteId = req.params.noteId;

  try {
    const event = await Event.findById(eventId);
    if (!event || event.user.toString() !== req.user.id) {
      return res.status(404).json({ message: 'Evento não encontrado' });
    }

    event.notes = event.notes.filter((note) => note._id.toString() !== noteId);
    const updatedEvent = await event.save();
    res.json(updatedEvent);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

module.exports = { getAllEvents, getEventsByMonth, createEvent, addNote, deleteNote };
